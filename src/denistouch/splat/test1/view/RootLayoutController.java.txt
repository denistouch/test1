package denistouch.splat.test1.view;

import denistouch.splat.test1.MainApp;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.DirectoryChooser;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;


public class RootLayoutController {

    @FXML
    private Button openDir;
    @FXML
    private TextField searchField;
    @FXML
    private ChoiceBox extensionBox;
    @FXML
    private TreeView directoryTree;
    @FXML
    private TabPane documentView;
    @FXML
    private Label nameSelection;
    @FXML
    private Label extensionSelection;
    @FXML
    private Button button;

    private MainApp mainApp;
    private volatile Path path;

    public RootLayoutController() {

    }

    @FXML
    private void initialize() {
        directoryTree.getSelectionModel().selectedItemProperty().addListener(new ChangeListener() {
            @Override
            public void changed(ObservableValue observable, Object oldValue, Object newValue) {
                if (newValue != null) {

                    //System.out.println(directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString());
                    /*if (directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString().lastIndexOf(".") >= 0) {
                        extensionSelection.setText(directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString().substring(directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString().lastIndexOf(".")));
                        System.out.print("");
                        System.out.println(directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString().lastIndexOf("."));
                        System.out.print("extension Name = ");
                        System.out.println(directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString().substring(directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString().lastIndexOf(".")));
                    }
                    System.out.print("extension Length = ");
                    System.out.println(directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString().length()-directoryTree.getTreeItem(directoryTree.getSelectionModel().getSelectedIndex()).getValue().toString().lastIndexOf("."));*/


                }
            }
        });
        extensionBox.getItems().addAll("*.log", "*.txt", "*.java");
        extensionBox.getSelectionModel().select(0);


        button.setDisable(true);
        button.setOnAction(event -> {/*
            Service<Void> service = new Service<Void>() {
                @Override
                protected Task<Void> createTask() {
                    return new Task<Void>() {
                        @Override
                        protected Void call() throws Exception {
                            MyFileVisitor visitor = new MyFileVisitor();
                            Files.walkFileTree(path, visitor);

                            for (Path tempPath : visitor.getVisited()){
                                directoryTree.getRoot().getChildren().addAll(new TreeItem<>(tempPath.getFileName().toString()));
                            }
                            return null;
                        }
                    };
                }
            };
            service.start();*/
            Task task = new Task<Void>() {
                @Override public Void call() {
                    final int max = 1000000;
                    for (int i=0; i<=max; i++) {

                        if (isCancelled()) {
                            break;
                        }
                        updateProgress(i, max);
                    }
                    return null;
                }
            };
            ProgressBar bar = new ProgressBar();
            Tab pathNameTab = new Tab(path.getFileName().toString());
            documentView.getTabs().addAll(pathNameTab,new Tab("ZALUPKA"));
            pathNameTab.setContent(bar);
            bar.progressProperty().bind(task.progressProperty());

            new Thread(task).start();
        });
    }

    @FXML
    private void setOnOpenHandler() {
        /*FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Выберете директорию");
        fileChooser.showOpenDialog(mainApp.getPrimaryStage());*/
        DirectoryChooser directoryChooser = new DirectoryChooser();
        directoryChooser.setTitle("Выберете директорию");
        path = directoryChooser.showDialog(mainApp.getPrimaryStage()).toPath();
        directoryTree.setRoot(new TreeItem(path.getFileName().toString()));
        button.setDisable(false);

        /*File dir = directoryChooser.showDialog(mainApp.getPrimaryStage());
        if (dir != null) {
            System.out.println(dir.getAbsolutePath());
            directoryTree.setRoot(new TreeItem(dir.getName().concat(" (") + dir.getAbsolutePath() + ")"));
            for (int i = 0; i < dir.listFiles().length; i++) {
                directoryTree.getRoot().getChildren().add(new TreeItem(dir.listFiles()[i].getName()));
                System.out.println(dir.listFiles()[i].getName());
            }
        }*/
    }

    public void setMainApp(MainApp mainApp) {
        this.mainApp = mainApp;
    }


}

class MyFileVisitor extends SimpleFileVisitor<Path> { //поведение при обходе дерева
    private Path[] visited;
    private int i = 0;

    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
        //System.out.println("File name: " + file);
        /*try {
            Thread.sleep(1);
        } catch (InterruptedException e) {

        }*/
        i++;
        visited[i] = file;
        System.out.println(file);
        return FileVisitResult.CONTINUE;
    }

    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {
        //System.out.println("Directory name: " + dir);
        /*try {
            Thread.sleep(1);
        } catch (InterruptedException e) {

        }*/
        i++;
        visited[i] = dir;
        System.out.println(dir);
        return FileVisitResult.CONTINUE;
    }

    public Path[] getVisited() {
        return visited;
    }
}